@page "/foto"
@page "/foto/{id:int}"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<PageTitle>Foto</PageTitle>

<div class="container d-flex flex-wrap gap-5">
    @if (foto == null)
    {
        @if (Fotos != null)
        {
            @foreach (Foto foto in Fotos?.Fotos)
            {
                <FotoCard Name="@foto.Name"
                          Description="@foto.Description"
                          Img="@foto.ImagePath"
                           />
                <NavLink @onclick="(() => GetInfo(foto.Id))">Info</NavLink>
            }
        }
        else
        {
            <p>Nessuna foto disponibile.</p>
        }
    }
    else
    {
        <FotoCard Name="@foto.Name"
                  Description="@foto.Description"
                  Img="@foto.ImagePath"
                  />
    }
</div>

@code {
    private FotoResponse? Fotos;
    private Foto? foto;

    protected override async Task OnInitializedAsync()
    {
        string currentUrl = NavigationManager.Uri;
        
        if (currentUrl.EndsWith("/foto"))
        {
            // Se l'URL termina con "/foto", fai questa chiamata API
            Fotos = await HttpClient.GetFromJsonAsync<FotoResponse>("https://localhost:7188/api/foto/getfotos");
        }
        else if (currentUrl.Contains("/foto/"))
        {
            // Se l'URL contiene "/foto/", fai questa chiamata API
            string idString = currentUrl.Split('/').Last();
            if (int.TryParse(idString, out int id))
            {
                foto = await HttpClient.GetFromJsonAsync<Foto>($"https://localhost:7188/api/foto/getfoto/{id}");
            }
        }
    }

    private void GetInfo(int id)
    {
        NavigationManager.NavigateTo($"/foto/{id}");
        foto = Fotos?.Fotos.FirstOrDefault(f => f.Id == id);
    }
}
